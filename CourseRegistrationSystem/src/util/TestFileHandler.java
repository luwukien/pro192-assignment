package util; // ƒê·∫∑t ·ªü th∆∞ m·ª•c g·ªëc ho·∫∑c n∆°i b·∫°n mu·ªën

import java.util.*;
import util.FileHandler;
import data.*;
import data.enums.*;
import interfaces.FileSerializable;

public class TestFileHandler{

    private static final FileHandler handler = new FileHandler();

    public static void main(String[] args) {
        System.out.println("=========================================");
        System.out.println("      B·∫ÆT ƒê·∫¶U KI·ªÇM TH·ª¨ FILE HANDLER      ");
        System.out.println("=========================================");
        
        // 1. Ki·ªÉm tra ch·ª©c nƒÉng ƒê·ªåC (LOAD)
        testLoadFunctions();
        
        // 2. Ki·ªÉm tra ch·ª©c nƒÉng GHI (SAVE)
        testSaveFunctions();
        
        System.out.println("\n=========================================");
        System.out.println("      KI·ªÇM TH·ª¨ HO√ÄN T·∫§T! üéâ             ");
        System.out.println("=========================================");
    }
    
    // --- 1. KI·ªÇM TRA H√ÄM ƒê·ªåC (LOAD) ---
    private static void testLoadFunctions() {
        System.out.println("\n--- 1. Ki·ªÉm tra ch·ª©c nƒÉng LOAD ---");

        // Load Students
        List<Student> students = handler.loadStudents(FileHandler.STUDENT_FILE);
        System.out.printf("   - Loaded Students: %d. Ki·ªÉm tra SV001: %s\n", 
            students.size(), 
            students.size() > 0 ? students.get(0).getFullName() : "L·ªói ƒë·ªçc file!"
        );
        // Ki·ªÉm tra Enum parsing (SV002 n√™n l√† INACTIVE)
        if (students.size() >= 2) {
             System.out.printf("   - Tr·∫°ng th√°i SV002: %s (Mong mu·ªën: INACTIVE)\n", students.get(1).getStatus());
        }

        // Load Subjects
        List<Subject> subjects = handler.loadSubjects(FileHandler.SUBJECT_FILE);
        System.out.printf("   - Loaded Subjects: %d. Ki·ªÉm tra WEB301 Credits: %d\n", 
            subjects.size(), 
            subjects.size() >= 3 ? subjects.get(2).getCredits() : -1
        );
        // Ki·ªÉm tra Prerequisite parsing
        if (subjects.size() >= 3) {
             System.out.printf("   - WEB301 Prereqs: %s (Mong mu·ªën: 2)\n", subjects.get(2).getPrerequisiteSubjectIds().size());
        }

        // Load Course Sections
        List<CourseSection> sections = handler.loadCourseSections(FileHandler.COURSE_FILE);
        System.out.printf("   - Loaded Course Sections: %d. Ki·ªÉm tra CS01 Max Students: %d\n", 
            sections.size(), 
            sections.size() > 0 ? sections.get(0).getMaxStudents() : -1
        );

        // Load Registrations
        List<Registration> regs = handler.loadRegistrations(FileHandler.REG_FILE);
        System.out.printf("   - Loaded Registrations: %d. Ki·ªÉm tra SV001|CS01 Grade: %.1f\n", 
            regs.size(), 
            regs.size() > 0 ? regs.get(0).getGrade() : -1.0
        );
        // Ki·ªÉm tra Double v√† Enum parsing
         if (regs.size() >= 4) {
             System.out.printf("   - Tr·∫°ng th√°i Reg cu·ªëi (SV003): %s (Mong mu·ªën: ENROLLED)\n", regs.get(3).getStatus());
        }
    }

    // --- 2. KI·ªÇM TRA H√ÄM GHI (SAVE) ---
    private static void testSaveFunctions() {
        System.out.println("\n--- 2. Ki·ªÉm tra ch·ª©c nƒÉng SAVE ---");
        
        // B∆∞·ªõc 1: Load l·∫°i d·ªØ li·ªáu ƒë·ªÉ ƒë·∫£m b·∫£o kh√¥ng b·ªã m·∫•t
        List<Student> students = handler.loadStudents(FileHandler.STUDENT_FILE);
        int initialSize = students.size();
        
        // B∆∞·ªõc 2: T·∫°o m·ªôt ƒë·ªëi t∆∞·ª£ng m·ªõi ƒë·ªÉ th√™m v√†o danh s√°ch
        Student newStudent = new Student(
            "SV099", 
            "Test Student Save", 
            "TEST", 
            "test@save.com", 
            StudentStatus.ACTIVE
        );
        students.add(newStudent);
        
        // B∆∞·ªõc 3: Ghi d·ªØ li·ªáu m·ªõi (4 sinh vi√™n) ra file
        handler.saveDataToFile(students, FileHandler.STUDENT_FILE);
        System.out.println("   - ƒê√£ l∆∞u " + students.size() + " Students v√†o " + FileHandler.STUDENT_FILE + ".");
        
        // B∆∞·ªõc 4: T·∫£i l·∫°i file ƒë·ªÉ ki·ªÉm tra xem d√≤ng m·ªõi c√≥ ƒë∆∞·ª£c th√™m v√†o kh√¥ng
        List<Student> studentsAfterSave = handler.loadStudents(FileHandler.STUDENT_FILE);
        
        System.out.printf("   - Sau khi SAVE, load l·∫°i file. K√≠ch th∆∞·ªõc m·ªõi: %d (Mong mu·ªën: %d)\n", 
            studentsAfterSave.size(), 
            initialSize + 1
        );
        
        // B∆∞·ªõc 5: Ki·ªÉm tra xem sinh vi√™n m·ªõi c√≥ t·ªìn t·∫°i kh√¥ng
        Student savedNewStudent = studentsAfterSave.stream()
            .filter(s -> s.getId().equals("SV099"))
            .findFirst()
            .orElse(null);

        if (savedNewStudent != null) {
            System.out.println("   - TH√ÄNH C√îNG: T√¨m th·∫•y Student SV099 ƒë√£ ƒë∆∞·ª£c l∆∞u!");
        } else {
            System.err.println("   - TH·∫§T B·∫†I: Kh√¥ng t√¨m th·∫•y Student SV099 sau khi l∆∞u.");
        }
        
        // Quan tr·ªçng: Kh√¥i ph·ª•c file g·ªëc (x√≥a SV099)
        students.remove(students.size() - 1);
        handler.saveDataToFile(students, FileHandler.STUDENT_FILE);
        System.out.println("   - ƒê√£ kh√¥i ph·ª•c file " + FileHandler.STUDENT_FILE + " v·ªÅ k√≠ch th∆∞·ªõc ban ƒë·∫ßu.");
    }
}